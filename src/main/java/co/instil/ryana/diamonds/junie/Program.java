package co.instil.ryana.diamonds.junie;
/* Generated by Junie
 * Using the same instructions as copilot from .github/copilot-instructions.md
 * and resources/diamond-prompt.md
 * I've manually moved it into the junie package
 */

import java.util.Scanner;

public class Program {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean continueRunning = true;

        while (continueRunning) {
            System.out.print("Enter diamond height (or 'quit' to exit): ");
            String input = scanner.nextLine().trim();
            
            if (input.equalsIgnoreCase("quit")) {
                continueRunning = false;
            } else {
                processInput(input);
            }
        }
        
        scanner.close();
        System.out.println("Goodbye!");
    }
    
    private static void processInput(String input) {
        try {
            int height = Integer.parseInt(input);
            if (isValidHeight(height)) {
                drawDiamond(height);
            } else {
                System.out.println("Height must be a positive odd number.");
            }
        } catch (NumberFormatException exception) {
            System.out.println("Please enter a valid number or 'quit'.");
        }
    }
    
    private static boolean isValidHeight(int height) {
        return height > 0 && height % 2 == 1;
    }
    
    private static void drawDiamond(int height) {
        int middleRow = height / 2;
        
        for (int row = 0; row < height; row++) {
            String line = createLine(row, middleRow, height);
            System.out.println(line);
        }
    }
    
    private static String createLine(int row, int middleRow, int height) {
        int distanceFromMiddle = Math.abs(row - middleRow);
        int hashCount = height - (2 * distanceFromMiddle);
        int spaceCount = distanceFromMiddle;
        
        return createSpaces(spaceCount) + createHashes(hashCount);
    }
    
    private static String createSpaces(int count) {
        return " ".repeat(count);
    }
    
    private static String createHashes(int count) {
        return "#".repeat(count);
    }
}