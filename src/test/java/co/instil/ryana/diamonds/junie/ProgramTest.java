package co.instil.ryana.diamonds.junie;

/* Generated by Junie
 * Using the same instructions as copilot from .github/copilot-instructions.md
 * and resources/diamond-prompt.md
 * I've manually moved it into the junie package
 */

import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class ProgramTest {

    @Test
    public void testIsValidHeight() throws Exception {
        Method isValidHeight = Program.class.getDeclaredMethod("isValidHeight", int.class);
        isValidHeight.setAccessible(true);
        
        // Test valid heights (odd numbers)
        assertTrue((Boolean) isValidHeight.invoke(null, 1));
        assertTrue((Boolean) isValidHeight.invoke(null, 3));
        assertTrue((Boolean) isValidHeight.invoke(null, 5));
        assertTrue((Boolean) isValidHeight.invoke(null, 7));
        
        // Test invalid heights (even numbers and negative numbers)
        assertFalse((Boolean) isValidHeight.invoke(null, 2));
        assertFalse((Boolean) isValidHeight.invoke(null, 4));
        assertFalse((Boolean) isValidHeight.invoke(null, 0));
        assertFalse((Boolean) isValidHeight.invoke(null, -1));
    }
    
    @Test
    public void testDrawDiamond() throws Exception {
        Method drawDiamond = Program.class.getDeclaredMethod("drawDiamond", int.class);
        drawDiamond.setAccessible(true);
        
        // Capture console output
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outputStream));
        
        // Test diamond with height 3
        drawDiamond.invoke(null, 3);
        String output = outputStream.toString();
        outputStream.reset();
        
        String expected = " #\n###\n #\n";
        assertEquals(expected, output);
        
        // Test diamond with height 5
        drawDiamond.invoke(null, 5);
        output = outputStream.toString();
        
        expected = "  #\n ###\n#####\n ###\n  #\n";
        assertEquals(expected, output);
        
        // Restore original System.out
        System.setOut(originalOut);
    }
}